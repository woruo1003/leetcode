struct Node{
    int key,val;
    Node *prev, *next;
    Node():key(0),val(0),prev(nullptr),next(nullptr){}
    Node(int _key, int _val):key(_key),val(_val),prev(nullptr),next(nullptr){}
};

class LRUCache {
private:
    unordered_map<int,Node*> m;
    Node *head,*tail;
    int size,capacity;
public:
    LRUCache(int _capacity) {
        head=new Node();
        tail=new Node();
        head->next=tail;
        tail->prev=head;
        size=0;
        capacity=_capacity;
    }
    
    int get(int key) {
        if(!m.count(key))
            return -1;
        else{
            moveToHead(m[key]);
            return m[key]->val;
        }

    }
    
    void put(int key, int value) {
        if(m.count(key)){
            m[key]->val=value;
            moveToHead(m[key]);
        }
        else{
            Node *p=new Node(key,value);
            m[key]=p;
            p->next=head->next;
            p->next->prev=p;
            head->next=p;
            p->prev=head;
            ++size;
            //把末尾的节点删掉
            if(size>capacity){
                Node* d=tail->prev;
                d->prev->next=tail;
                tail->prev=d->prev;
                --size;
                m.erase(d->key);
                delete d;
            }
        }

    }

    void moveToHead(Node *p){
        p->prev->next=p->next;
        p->next->prev=p->prev;
        p->next=head->next;
        p->next->prev=p;
        head->next=p;
        p->prev=head;

    }
};
